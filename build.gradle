apply from: file("${rootDir}/gradle/project.gradle")

subprojects {
    apply from: file("${rootDir}/gradle/check.gradle")

    group = 'core.framework'
    version = '4.17.0'
}

def mongoVersion = '3.5.0'
def elasticVersion = '5.6.2'
def log4jVersion = '2.9.1'  // used by elasticsearch
def kafkaVersion = '0.11.0.0'
def jacksonVersion = '2.9.0'
def junitJupiterVersion = '5.0.0'

project(':core-ng-api') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api(
                'javax.xml.bind:jaxb-api:2.3.0'
        )
        testRuntimeOnly(
                "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
        )
    }
}

project(':core-ng') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api(
                project(":core-ng-api"),
                'javax.inject:javax.inject:1',
                'org.slf4j:slf4j-api:1.7.25'
        )
        implementation(
                'org.javassist:javassist:3.22.0-CR2',
                "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}",
                "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}",
                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
                "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}",
                'org.apache.httpcomponents:httpclient:4.5.3',
                'io.undertow:undertow-core:1.4.20.Final'
        )
        compileOnly(
                'redis.clients:jedis:2.9.0@jar',
                "org.mongodb:mongo-java-driver:${mongoVersion}",
                "org.apache.kafka:kafka-clients:${kafkaVersion}@jar",
                "org.elasticsearch.client:transport:${elasticVersion}",
                "org.apache.logging.log4j:log4j-api:${log4jVersion}"   // used by elasticsearch
        )
        testImplementation(
                "org.hamcrest:java-hamcrest:2.0.0.0",
                'org.mockito:mockito-core:2.10.0'
        )
        testRuntimeOnly(
                'org.hsqldb:hsqldb:2.4.0'
        )
    }
}

project(':core-ng-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")

    dependencies {
        api(
                project(":core-ng"),
                "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}",
                "org.hamcrest:java-hamcrest:2.0.0.0",
                'org.mockito:mockito-core:2.10.0'
        )
//        implementation(
//                "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
//        )
        compileOnly(
                "org.mongodb:mongo-java-driver:${mongoVersion}",
                "com.github.fakemongo:fongo:2.1.0@jar",
                "org.apache.kafka:kafka-clients:${kafkaVersion}@jar",
                "org.elasticsearch.client:transport:${elasticVersion}",
                "org.apache.logging.log4j:log4j-core:${log4jVersion}"       // used by elasticsearch
        )
        testRuntimeOnly(
                'org.hsqldb:hsqldb:2.4.0',
                'com.vividsolutions:jts:1.13',                  // used by fongo
                'org.codelibs.elasticsearch.module:lang-painless:5.6.1'
        )
    }
}

def mavenURL = hasProperty('mavenURL') ? mavenURL : null

configure(subprojects.findAll { it.name.startsWith('core-ng') }) {
    apply plugin: 'maven-publish'

    if (mavenURL != null) {
        assert project.file(mavenURL).exists()
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourcesJar {
                        classifier 'sources'
                    }
                }
            }
            repositories {
                maven {
                    url mavenURL     // used by 'gradlew -PmavenURL=/path clean publish'
                }
            }
        }
    }
}

project(':log-processor') {
    apply from: file("${rootDir}/gradle/app.gradle")
    dependencies {
        compile(
                project(':core-ng'),
                "org.elasticsearch.client:transport:${elasticVersion}",
                "org.apache.kafka:kafka-clients:${kafkaVersion}"
        )
        runtime(
                "org.apache.logging.log4j:log4j-api:${log4jVersion}"       // used by elasticsearch
        )
        testCompile(
                project(':core-ng-test')
        )
        testRuntime(
                "org.apache.logging.log4j:log4j-core:${log4jVersion}"       // used by elasticsearch
        )
    }
}
